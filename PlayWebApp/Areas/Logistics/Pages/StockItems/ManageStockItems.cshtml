@page
@model ManageStockItemsModel
@{
    ViewData["Title"] = "Stock items";
    ViewData["SelectedPage"] = "ManageStock";
}

@{
    //ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = "xxx";
}

@section ToolBar{
<div class="row">
    <partial name="_ActionBar" />

    <div class="row g-1">
        <div id="serverMessages">

        </div>
    </div>
</div>
}

@if (Model != null)
{
    <form class="row g-1" id="frmStockItems" method="post">
        <div class="col-12">
            <label asp-for="StockItemVm.ItemDisplayId"></label>
            <input asp-for="StockItemVm.ItemDisplayId" class="form-control" aria-required="true" />
            <span asp-validation-for="StockItemVm.ItemDisplayId" class="text-danger"></span>
        </div>
        <div class="col-12">
            <label asp-for="StockItemVm.ItemDescription"></label>
            <input asp-for="StockItemVm.ItemDescription" class="form-control" aria-required="true" />
            <span asp-validation-for="StockItemVm.ItemDescription" class="text-danger"></span>
        </div>

        <ul class="nav nav-tabs" id="tabsStockItem" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="tabPrices" data-bs-toggle="tab" data-bs-target="#tabPricesContent"
                type="button" role="tab" aria-controls="tabPricesContent" aria-selected="true">Prices</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="tabSuppliers" data-bs-toggle="tab" data-bs-target="#tabSuppliersContent"
                type="button" role="tab" aria-controls="tabSuppliersContent" aria-selected="false">Suppliers</button>
            </li>
        </ul>
        <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="tabPricesContent" role="tabpanel" aria-labelledby="tabPrices">
                <div class="row">
                    <div class="col-sm-6">Display ID</div>
                    <div class="col-sm-6">Description</div>
                </div>
                @foreach (var item in Model.StockItemsList)
                {
                    <div class="row">
                        <div class="col-sm-6">@item.DisplayId</div>
                        <div class="col-sm-6">@item.Description</div>
                    </div>
                }
            </div>
            <div class="tab-pane fade" id="tabSuppliersContent" role="tabpanel" aria-labelledby="tabSuppliers">Stock item
                suppliers</div>
        </div>

    </form>

}


@section Scripts {
<partial name="_ValidationScriptsPartial" />
<script>
    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name]) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        //console.log(a);
        //console.log(o);
        return o;
    };
</script>

<script>

    var persistenceService = function (serviceParams) {
        var url = serviceParams.url;
        var formId = serviceParams.formId;
        var msgContainer = serviceParams.msgContainer;
        var getIdCallback = serviceParams.getIdCallback;
        var nextEndpoint = serviceParams.nextEndpoint;
        var prevEndpoint = serviceParams.prevEndpoint;
        var onAdd = serviceParams.onAdd;
        var lastEndpoint = serviceParams.lastEndpoint;
        var firstEndpoint = serviceParams.firstEndpoint;
        var deleteEndpoint = serviceParams.deleteEndpoint;

        var onGetResponse = serviceParams.onGetResponse;
        var onDeleteResponse = serviceParams.onDeleteResponse;        

        var registerHandlers = function () {

            //
            // save record
            //
            $('#btnSave').on('click', function (e) {
                console.log('saving changes ...', e);
                var postParams = {
                    callback: function (response) {
                        console.log('data is saved on the server. Service response: ', response);
                        $('#' + msgContainer).attr('class', 'alert alert-success')
                            .text("Record is successfully saved").show(0).delay(8000).hide(0);
                    },
                    errorCallback: function (error) {
                        console.error('an error has occurred while saving the record. Error: ', error);
                        $('#' + msgContainer).attr('class', 'alert alert-danger')
                            .text("An error has occurred while saving the changes. Error: " + error.responseText).show(0).delay(8000).hide(0);
                    },
                    @* data: { 'StockItemVm.ItemDisplayId': "item1", 'StockItemVm.ItemDescription': "Some description" } *@
                    data: $('#' + formId).serializeObject(),
                        url: url,
            };
            console.log(postParams);
            postRequest(postParams);
        });

        var resetOnNotFound = function (error) {
            console.log('error-status', error.status);
            if (error.status === 404) {
                onAdd();
            }
        };

        //
        // move to next record
        //

        var moveNext = function () {
            console.log('moving to next record');
            var getParams = {
                callback: function (response) {
                    console.log(response);
                    onGetResponse(response);
                },
                errorCallback: function (error) {
                    console.error(error);
                    resetOnNotFound(error);
                },
                url: url + nextEndpoint()
            };
            getRequest(getParams);
        };

        //
        // move to prev record
        //
        var movePrev = function () {
            console.log('moving to prev record');
            var getParams = {
                callback: function (response) {
                    console.log(response);
                    onGetResponse(response);
                },
                errorCallback: function (error) {
                    console.error(error);
                    resetOnNotFound(error);
                },
                url: url + prevEndpoint()
            };
            getRequest(getParams);
        };

        //
        // move to first
        //

        var moveFirst = function () {
            console.log('moving to First record');
            var getParams = {
                callback: function (response) {
                    console.log(response);
                    onGetResponse(response);
                },
                errorCallback: function (error) {
                    console.error(error);
                },
                url: url + firstEndpoint
            };
            getRequest(getParams);
        };
        //
        // move to last
        //

        var moveLast = function () {
            console.log('moving to last record');
            var getParams = {
                callback: function (response) {
                    console.log(response);
                    onGetResponse(response);
                },
                errorCallback: function (error) {
                    console.error(error);
                },
                url: url + lastEndpoint
            };
            getRequest(getParams);
        };

        var deleteItem = function () {
            console.log('deleting record');
            var deleteParams = {
                callback: function (response) {

                    console.log('Record is deleted. Service response: ', response);
                    $('#' + msgContainer).attr('class', 'alert alert-success')
                        .text("Record is successfully deleted").show(0).delay(8000).hide(0);

                    console.log(response);
                    onDeleteResponse(response);
                    moveNext();
                },
                errorCallback: function (error) {
                    console.error(error);
                },
                url: url + deleteEndpoint()
            };
            deleteRequest(deleteParams);
        };


        $("#btnNext").on('click', function (e) {
            if (!getIdCallback()) {
                moveFirst();
                return;
            }
            moveNext();
        });

        $("#btnPrev").on('click', function (e) {
            if (!getIdCallback()) {
                moveLast();
                return;
            }
            movePrev();
        });

        $('#btnFirst').on('click', function (e) {
            moveFirst();
        });

        $('#btnLast').on('click', function (e) {
            moveLast();
        });

        //
        // add new
        //
        $("#btnAdd").on('click', function (e) {
            onAdd();
        });

        //
        // delete record
        //
        $("#btnDelete").on('click', function (e) {
            if (!getIdCallback()) return;
            deleteItem();
        });

    };

    var dumpParams = function () {
        console.log(serviceParams);
    };

    var postRequest = function (postParams) {
        var ajaxOptions = {
            url: postParams.url,
            method: 'POST',
            data: postParams.data ? JSON.stringify(postParams.data) : {},
            contentType: 'application/json',
            headers: postParams.headers ? postParams.headers : {}
        };

        $.ajax(ajaxOptions).then(function done(response) {
            postParams.callback(response);
        }, function error(error) {
            postParams.errorCallback(error);
        });
    };

    var getRequest = function (getParams) {
        var ajaxOptions = {
            url: getParams.url,
            method: 'GET',
            headers: getParams.headers ? getParams.headers : {}
        };

        $.ajax(ajaxOptions).then(function done(response) {
            getParams.callback(response);
        }, function error(error) {
            getParams.errorCallback(error);
        });

    };

    var deleteRequest = function (deleteParams) {
        var ajaxOptions = {
            url: deleteParams.url,
            method: 'DELETE',
            headers: deleteParams.headers ? deleteParams.headers : {}
        };

        $.ajax(ajaxOptions).then(function done(response) {
            deleteParams.callback(response);
        }, function error(error) {
            deleteParams.errorCallback(error);
        });
    };

    return {
        registerHandlers,
        dumpParams,
        postRequest,
        getRequest
    };

    };

    $(document).ready(function () {
        var srv = new persistenceService({
            url: "https://localhost:7096/api/v1/StockItems/",
            formId: "frmStockItems",
            msgContainer: "serverMessages",
            getIdCallback: function () {
                return $('#StockItemVm_ItemDisplayId').val();
            },
            nextEndpoint: function () {
                return $('#StockItemVm_ItemDisplayId').val() + "/next";
            },
            prevEndpoint: function () {
                return $('#StockItemVm_ItemDisplayId').val() + "/previous";
            },
            onAdd: function () {
                $('#StockItemVm_ItemDisplayId').val('');
                $('#StockItemVm_ItemDescription').val('');
            },
            lastEndpoint: "last",
            firstEndpoint: "first",
            onGetResponse: function (response) {
                $('#StockItemVm_ItemDisplayId').val(response.itemDisplayId);
                $('#StockItemVm_ItemDescription').val(response.itemDescription);
            },
            deleteEndpoint: function () {
                return $('#StockItemVm_ItemDisplayId').val();
            },
            onDeleteResponse: function (response) {

            },
        });
        srv.registerHandlers();
        srv.dumpParams();
    });

</script>

}
